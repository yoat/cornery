<h1>Welcome#index</h1>
<p>Find me in app/views/welcome/index.html.erb</p>
<script>
    // Declarations ////////////////////////////////////////////////////////////
    // VARIABLES
    var camera, scene, renderer, geometry, material, mesh;
    var stats = new Stats();
    
    // see also http://vimeo.com/36278748 particle system in 3 minutes - great to watch
    /////// CONSTANTS
    var CONST = {
        cubesize : 50,
        hobo : 0x80, // highest order bit only AKA MSB, used for bitshifting down
    };
    // now reference as CONST.cubesize;
    //var cubesize = 50;
    /////////////////

    // Initializations /////////////////////////////////////////////////////////
    // configure Stats
    // Align top-left
    stats.getDomElement().style.position = 'fixed';
    stats.getDomElement().style.right = '0px';
    stats.getDomElement().style.top = '0px';
    
    document.body.appendChild( stats.getDomElement() );
    document.addEventListener( 'mousemove', onDocumentMouseMove, false );

    var mouseX = 0, mouseY = 0;
    var windowHalfX = window.innerWidth / 2;
	var windowHalfY = window.innerHeight / 2;
    
    setInterval( function () {
        stats.update();
    }, 1000 / 60 );

    // start animation
    init();
    animate();

    // Functions ///////////////////////////////////////////////////////////////
    function init() {

        scene = new THREE.Scene();

        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
        camera.position.z = -1000;
        scene.add( camera );

        geometry = new THREE.CubeGeometry( 100, 100, 100 ); // these params affect the size of the cube, not the position
        // MeshBasicMaterial default worked well with wireframe
        // MeshPhongMaterial required options are not clear to me
        material = new THREE.MeshLambertMaterial( { color: 0xCCC0C0 });//new THREE.MeshBasicMaterial( { color: 0xfff000, blending: true } );

        var oct = new Octree(1, 1);
        
        mesh = new THREE.Mesh( geometry, material );
        /////////////////////////////////scene.add( mesh );

        // create a point light
		var pointLight = new THREE.PointLight( 0xFFFFFF );
        var pointLight2 = new THREE.PointLight( 0xFFFFFF );
		// set its position
		pointLight.position.x = 10;
		pointLight.position.y = 50;
		pointLight.position.z = 150;
        pointLight2.position.x = -450;
    	pointLight2.position.y = 300;
		pointLight2.position.z = -300;

		// add to the scene
		scene.add(pointLight);
        scene.add(pointLight2);
		
        renderer = new THREE.WebGLRenderer();//.CanvasRenderer(); //THREE.WebGLRenderer();
        renderer.setSize( window.innerWidth, window.innerHeight );

        renderer.domElement.style.position = 'fixed';
        document.body.appendChild( renderer.domElement );
    }
    
    var yggdrasl;
    function loadGrid() {
        
        yggdrasil = new Octree(2, "EF");
        THREE.SceneUtils.traverseHierarchy( yggdrasil, function ( octant ) {

    		octant.rotation.x = rx;
			octant.rotation.y = ry;
			object.rotation.z = rz;

		} );
        
        /*THREE.SceneUtils.traverseHierarchy( root, function ( object ) {

			object.rotation.x = rx;
			object.rotation.y = ry;
			object.rotation.z = rz;

		} );*/
        
        // TODO:
        
        // test octree traversal with debug printing
        
        // load the JSON data [finalize what bytes need to be in each object {start small: solid or not}, reserve space] and build the tree of booleans
        // on the way back up from the leaves, accumulate cached mesh data at each level
        // draw it all and count the FPS
        // then get smarter about what gets loaded or not, rendered or not.
    }
    
    function onDocumentMouseMove(event) {
    	mouseX = ( event.clientX - windowHalfX ) * 10;
		mouseY = ( event.clientY - windowHalfY ) * 10;
	}
    
    function animate() {
        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame( animate );
        render();
    }

    function render() {
        // update camera position based on input
        camera.position.x += ( mouseX - camera.position.x ) * 0.05;
        camera.position.y += ( - mouseY - camera.position.y ) * 0.05;
        camera.lookAt( scene.position );
        
        renderer.render( scene, camera );

    }

    var treeId = 0;
    var levelsToGo = 1;
    
    
/////////////////////// OCTREE /////////////////////////////////////////////////
// we could have a hashtable of hyperoctree URLs and their Octree objects
// each octree node has a URL/name/ID and we look that up in the table to get the data
//  which is incorporated into tree form when traversing the datastructure
//  to pregenerate the cumulative meshes
// render the top level mesh cache
function Octree(scaleLevel, treeData) {
    
    // for directional traverse
    // logical AND the upper and lower layers to determine, then if == 0xF you have complete horizontal coverage, no need to traverse to the up or down directions.
    // same for left or right halves, front and back halves, and their respective directions.
    // DirectionalTraverse(Vector3) check for coverage across the walls we're going in to (up to 3), if fully covered, don't traverse.
    // if not fully covered - a gap in the block wall - then traverse and add all shapes found to registry to be in Scene
    // stop traversal downwards if your distance from origin is in a certain zone. 
    
    this.Nodes = [];
    this.level = 0;
    this.node = 0;
    // scale level is an index that is used to compute the scale for the models
    this.scaleLevel = scaleLevel;
    
    // solida have no subdivisions - they are terminal nodes
    this.solid = false;
    // complex blocks have blackbox guts - inner dimension runs disconnected
    this.complex = false;
    
    // composite mesh of children and offspring along with self
    this.compositeMesh;
    // own custom material/texture/color/etc.
    this.material;
    // referencable ID for searching
    this.id = scaleLevel + treeId++;
    
    //this.isLightSource;
    //Object3D.position is enough for now (pivots)//this.center = new THREE.Vector3();
    
    // JSON Data structure - deserialized
    // create the basic tree structure such that it can be traversed and loaded unambiguously.
    var jsondata = [ { 0 : [1, 2, 3, 4, 5, 6, 7, 8]},
        { 1 : [9, 10, 11, 12, 13, 14, 15, 16]},
        { 3 : [17, 18, 19, 20, 21, 22, 23, 24]},
        { 7 : [25, 26, 27, 28, 29, 30, 31, 32]},
        { 8 : [33, 34, 35, 36, 37, 38, 39, 40]},
        { 9 : [41, 42, 43, 44, 45, 46, 47, 48]},
        { 41 : [49, 50, 51, 52, 53, 54, 55, 56]},
        { 49 : [57, 58, 59, 60, 61, 62, 63, 64]},
        { 57 : [65, 66, 67, 68, 69, 70, 71, 72]} 
    ];
    
    var jsondata2 = { 
        0 : [1, 2, 3, 4, 5, 6, 7, 8],
        1 : [9, 10, 11, 12, 13, 14, 15, 16],
        3 : [17, 18, 19, 20, 21, 22, 23, 24],
        7 : [25, 26, 27, 28, 29, 30, 31, 32],
        8 : [33, 34, 35, 36, 37, 38, 39, 40],
        9 : [41, 42, 43, 44, 45, 46, 47, 48],
        41 : [49, 50, 51, 52, 53, 54, 55, 56],
        49 : [57, 58, 59, 60, 61, 62, 63, 64],
        57 : [65, 66, 67, 68, 69, 70, 71, 72] 
    };
    // 0x0 : 0000 : 0 
    // 0x1 : 0001 : 1
    // 0x2 : 0010 : 2
    // 0x3 : 0011 : 3
    // 0x4 : 0100 : 4
    // 0x5 : 0101 : 5
    // 0x6 : 0110 : 6
    // 0x7 : 0111 : 7
    // 0x8 : 1000 : 8
    // 0x9 : 1001 : 9
    // 0xA : 1010 : 10
    // 0xB : 1011 : 11
    // 0xC : 1100 : 12
    // 0xD : 1101 : 13
    // 0xE : 1110 : 14
    // 0xF : 1111 : 15
    var treedata = {
        // id : { kIds : [], complexKids : 0x00, solidKids : 0x00, hyperKids :0x00 },
        0 : { kIds : [1, 2, 3, 4, 5, 6, 7, 8], complexKids : 0xA3, solidKids : 0x5C, hyperKids : 0x00 },
        1 : { kIds : [9, 10, 11, 12, 13, 14, 15, 16], complexKids : 0x80, solidKids : 0x55, hyperKids : 0x00 },
        3 : { kIds : [17, 18, 19, 20, 21, 22, 23, 24], complexKids : 0x00, solidKids : 0x99, hyperKids : 0x00 },
        7 : { kIds : [25, 26, 27, 28, 29, 30, 31, 32], complexKids : 0x00, solidKids : 0x66, hyperKids : 0x00 },
        8 : { kIds : [33, 34, 35, 36, 37, 38, 39, 40], complexKids : 0x00, solidKids : 0xA3, hyperKids : 0x00 },
        9 : { kIds : [41, 42, 43, 44, 45, 46, 47, 48], complexKids : 0x80, solidKids : 0x02, hyperKids : 0x00 },
        41 : { kIds : [49, 50, 51, 52, 53, 54, 55, 56], complexKids : 0x80, solidKids : 0x02, hyperKids : 0x00 },
        49 : { kIds : [57, 58, 59, 60, 61, 62, 63, 64], complexKids : 0x80, solidKids : 0x02, hyperKids : 0x00 },
        57 : { kIds : [65, 66, 67, 68, 69, 70, 71, 72], complexKids : 0x00, solidKids : 0x55, hyperKids : 0x00 },
    };
    
    var blockdata = {
        2 : 0xFF0000,
        4 : 0x00FF00,
        5 : 0x0000FF,
        6 : 0x0FF000,
        10 : 0x00FFF0,
        12 : 0xFFF000,
        14 : 0xFFFFF0,
        16 : 0xFF0F00,
        17 : 0xFF00F0,
        20 : 0xFF0FF0,
        21 : 0x00FF0F,
        24 : 0x000F00,
        26 : 0x0F0000,
        27 : 0x00F0F0,
        30 : 0xF0000F,
        31 : 0xFF00FF,
        33 : 0xF0F0F0,
        35 : 0x0F0F0F,
        39 : 0xFFF0FF,
        40 : 0xFFFF0F,
        47 : 0xFF0FF0,
        55 : 0x0F0F00,
        63 : 0xF0FF00
    };
    
    var OCHO = 8;
    var cubesize = 2; // size at max level
    var maxScale = 8; // top scale
    var scalesToRender = 8;
    var geoCache = cacheGeometry(cubesize, 8, 17);
    var boxCount = 0;
    
    // should define a scheme
    var id = 0;
    var octantProto = {
        rootId : {
            //kids : [nullableOctreeProto,nullableOctreeProto,nullableOctreeProto,nullableOctreeProto,nullableOctreeProto,nullableOctreeProto,nullableOctreeProto,nullableOctreeProto],
            kIds : [ id, id, id, id,  id, id, id, id ],
            complexKids : 0x00, 
            solidKids : 0x00, 
            hyperKids :0x00
        }
    };
    var octreeProto = {
        octantArray : [ octantProto, octantProto, octantProto, octantProto, octantProto, octantProto, octantProto, octantProto ],
        octantById : function(id) { 
            for (var k =0; k < OCHO; k++) {
                if (this.octantArray[k].id == id)
                    return octantArray[k];
            }
        },
    };
    
    Octree.getChild = function(threeBitChain) {
        var id = 0x3 & threeBitChain;
        threeBitChain >> 3;
        
        if ( threeBitChain == 0 ) {
            // 0 in shifted means threeBitChain is empty, we've reached the end
            return this;
        } else if ( id != 0 ) {
            // 0 is root and should be invalid id for any child
            // query with what's left of the threeBitChain
            return getChild(threeBitChain);
        }        
    };
    
    ///////////////////////////
    var _nextId = 0;
    function idTracker() {
        _nextId = 0;
    }
    idTracker.prototype.getNext = function() {
    	_nextId++;
        return _nextId;
    }
    var idtrk = new idTracker();
    
    // pass 'idTracker.getNext' as a param to recursive function (say 'nextFunc')
    // to get an id, tree.ID = nextFunc();
    // should keep lexical scope internally within any context
    // http://snook.ca/archives/javascript/javascript_pass

    // set true to enable document writing in HTML
    // prefix doc writes like
    // $debug && document.write("<h1>debug</h1>");
    var $debug = 0;
    
    var counter = 0;
    var treedata2 = {};
    var blockdata2 = {};
    
    var generateRandomOctree = function(scalesToGo, myId, nodeIdFunc) {
        var tree = {};
        //tree.ID = nodeIdFunc();
            
        $debug && document.write("<ul>");
        
        /*document.write("<p>nextId:" + nextId + "</P>");
        tree.kIds = generateSequentialArray(OCHO, nextId);
        nextId += OCHO;
        document.write("<p>nextId:" + nextId + "</P>");*/
        
        // define a subset of the children as solid
        tree.solidKids = UTIL.RandomBits(OCHO);
        $debug && document.write("<li>solidKids: 0x" + UTIL.IntToHex(tree.solidKids) + "</li>");
        
        // a subset of the subset of non-solid children will be complex
        var other = UTIL.RandomBits(OCHO);
        tree.complexKids = ((tree.solidKids ^ other) & other);
        $debug && document.write("<li>complexKids: 0x" + UTIL.IntToHex(tree.complexKids) + "</li>");
        
        // hyperkids placeholder
        tree.hyperkids = 0x00;
        // this will be used to validate higher #ed IDs in kIds and 
        //  recursively loop the data structure loading
        
        tree.scale = scalesToGo;
        
        /// expand this Octant into an Octree, if there's room
        if (scalesToGo > 0) {
            tree.kIds = [];
            
            // processing from MSB to LSB, arbitrarily
            //for (var g = 0x80; g > 0; g = (g >> 1)) {
            // processing from LSB to MSG
            //for (var g = 0; g < 0x100; g = (1 << 1)) {
            for (var g = 0; g < OCHO; g++) {
                var childId = nodeIdFunc();
                var bitmask = (1 << ((OCHO - 1) - g));
                
                // add this new childs ID to the kIds array
                tree.kIds.push(childId);
                
                // check if this bit is a solid
                if (bitmask & tree.solidKids) {
                    // add this new child's ID to the blockdata colors array
                    var color = 0xFF0000; //UTIL.RandomBits(24);
                    
                    $debug && document.write("<li>Solid: " + childId + " Color: " + UTIL.IntToHex(color));
                    counter++;
                    
                    // with a randomized color
                    blockdata2[myId] = color;
                    
                    $debug && document.write("</li>");
                } else if (bitmask & tree.complexKids) {                    
                    $debug && document.write("<li>Complex: " + childId);
                    // Recursively build Octrees for the Octants in this Octree
                    generateRandomOctree(scalesToGo - 1, childId, nodeIdFunc);
                    $debug && document.write("</li>");
                }
            }
            
            
            /*for (var j = 0; j < OCHO; j++) {
                var myId = nodeIdFunc();
                //tree.
                $debug && document.write("<li>ID: " + myId);
                // Recursively build Octrees for the Octants in this Octree
                generateRandomOctree(scalesToGo - 1, nodeIdFunc);
                $debug && document.write("</li>");
            }*/
        }
        
        // add this tree chunk to the main tree
        treedata2[myId] = tree;
        
        $debug && document.write("</ul>");
        
        // we're not returning recursive structures, that would bust the memory
        //  on an infinitely scalable octree. We need to chunk is all 4 dimensions
        //   height, width, depth, scale; thus, the data structure
        //return tree;
    };
        
    var generateSequentialArray = function(count, nextId) {
        var retval = [];
        for (var k = 0; k < count; k++) {
            retval[k] = nextId;
            nextId++;
            //document.write("<p>during:" + nextId + "</P>");
        }
        return retval;
    }
    
    /*
    // 1. functionclass first
    function myobject()
    {
        this.value = 5;
    }
    // 2. add prototype function
    myobject.prototype.add = function()
    {
    	this.value++;
        return this.value;
    }
    // 3. define isntance of functionclass
    var o = new myobject();
    alert(o.value); // o.value = 5
    // 4. call the method on the instance
    var totes = o.add();
    alert(totes);
    alert(o.value); // o.value = 6
    // 5. declare the receiver method
    function objectchanger(fnc)
    {
    	fnc(); // runs the function being passed in
    }
    // 6. call the receiver method with instance method as param
    objectchanger(o.add);
    alert(o.value); // sorry, still just 6*/

    generateRandomOctree(8, 0, idtrk.getNext);
    
    var tstr = JSON.stringify(treedata);
    var t2str = JSON.stringify(treedata2);
    
    function syntaxHighlight(json) {
        if (typeof json != 'string') {
             json = JSON.stringify(json, undefined, 2);
        }
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }

    var stpp = syntaxHighlight(tstr);
    //document.write(stpp);
    var stpp2 = syntaxHighlight(t2str);
    //document.write(stpp2);

    var matary = [
        new THREE.MeshLambertMaterial( { color: 0x90A600 }), // orange
        new THREE.MeshLambertMaterial( { color: 0x7a5527 }), // brown
        new THREE.MeshLambertMaterial( { color: 0xFFFF00 }), // yellow
        new THREE.MeshLambertMaterial( { color: 0xFF0000 }), // red
        new THREE.MeshLambertMaterial( { color: 0x00FF00 }), // green
        new THREE.MeshLambertMaterial( { color: 0x0000FF }) // blue
    ];
    
    
    // Cube Size at 0 index, Max Scale, Scales To Render
    function cacheGeometry(cs, ms, str)
    {
        // 
        var retval = [];
        var scaledSize = cs * Math.pow(2, ms);
        var end = ms - str;
        for (var k = ms; k > end; k--) {
            //var scaledSize = Math.pow(2.0, k ) * cs;
            retval[k] =  new THREE.CubeGeometry( scaledSize, scaledSize, scaledSize );
            //retval[k].scale = scale;
            // halve the size per level - if powers of two, bitshift instead ---
            scaledSize = scaledSize / 2;
        }
        
        
        return retval; 
    }
    
    var getDataScape = function( data, parentId, parentPosition, scaleFactor ) {
      var obj = new THREE.Object3D();
      
      if (data[parentId] != undefined) { 
          //DEBUG//document.write(data[parentId]); 
          
          var scaleMult = Math.pow(2.0, scaleFactor );//scaleFactor;
          
          for (var k = 0; k < 8; k++) {
              var cubeKey;
              if (data[parentId] != undefined && data[parentId].kIds != undefined) {
                  cubeKey = data[parentId].kIds[k];
              }
              
              //var myPositon = indexToVector3(k) * scaleMult + parentPosition;
              var myPosition = new THREE.Vector3();
              var octetOffset = indexToVector3(k);
              //var 
              myPosition.x = octetOffset.x * scaleMult + parentPosition.x;
              myPosition.y = octetOffset.y * scaleMult + parentPosition.y;
              myPosition.z = octetOffset.z * scaleMult + parentPosition.z;
              
              if ( data[cubeKey] != null ) {
                  if (scaleFactor - 1 >= maxScale - scalesToRender) {
                      obj.add( getDataScape( data, cubeKey, myPosition, scaleFactor - 1 ));
                  }
              } else {
                  // var isSolid = (treedata[parentId].solidKids & (1 << k)); // get the parent object's solid bitarray, check my ID
                var materia;
                
                if (blockdata2[cubeKey] != undefined) {
                    //DEBUG//document.write('<p>parent:' + parentId + ' ownId:' + cubeKey + ' color:' + blockdata[cubeKey] +'</p>');
                    materia = new THREE.MeshLambertMaterial({ color: blockdata2[cubeKey]});
                } else {
                    materia = new THREE.MeshLambertMaterial({ color: 0x0003FC});//matary[scaleFactor];
                }
                
                  // procedural pattern - only render the even indices
                //if (scaleFactor % 2 == 0) { 
                //if ( k % 2 == 0 ) {
                //if (true) {
                var parentSolidBitmask = (data[parentId].solidKids != undefined) ? data[parentId].solidKids : 0x00;
                if (parentSolidBitmask & (0x80 >> k)) {
                  var tempMesh = new THREE.Mesh( geoCache[scaleFactor], materia );
                  //tempMesh.position.x = scaleMult * cubesize * k;
                  //tempMesh.position.y = scaleMult * cubesize * k;
                  tempMesh.position = myPosition;
                  
                  //tempMesh.scale = scaleMult;
                  obj.add(tempMesh);
                  
                  boxCount++;
                }
              }
          }
      }
      // parse the root children
      // get the number of children ids that do exist in the data.keys()
      // if the number was 0, draw a block here
      // for each child that existed, recurse this procedure
      // offset the coordinates of the mesh by the scaleFactor
      // and the coordinates relative to its root coordinates
      // and simple multiplication.
      // when the tree is completely traversed the mesh will be meshed
      // and ready for rendering
      
      return obj;
    };
    
    function indexToVector3(index)
    {
        var retval = new THREE.Vector3();
        
        retval.x = (index & 0x04) ? 2.0 : -2.0;
        retval.y = (index & 0x02) ? 2.0 : -2.0;
        retval.z = (index & 0x01) ? 2.0 : -2.0;
        
        return retval;
    }
    
    
    var t2 = getDataScape(treedata2, 0, scene.position, maxScale);
    scene.add(t2);
     
    var maxi = 4;
    var offsetsize = cubesize/4;
    var meshes = [];
    //var masterobj = new THREE.Object3D();
    for (var j = 0; j < maxi; j++) {
        meshes[j] = [];
        for (var h = 0; h < maxi; h++) {
            meshes[j][h] = getDataScape(treedata, 0, scene.position, maxScale);
            meshes[j][h].position.x = offsetsize * j;
            meshes[j][h].position.y = offsetsize * h;
//            scene.add( meshes[j][h] );
            //masterobj.add( meshes[j][h] );
        }
    }
    
    //scene.add( masterobj );
    
    document.write("<p>boxounct:" + boxCount + "</p>");

    //var randomnumber=Math.floor(Math.random()*11
    //var bits = 8;
    //var num = UTIL.RandomBits(bits);
    //document.write("random " + bits + " bit number:" + num + " in hex: 0x" + UTIL.IntToHex(num) + "</p>");
        
} // function Octree

</script>
